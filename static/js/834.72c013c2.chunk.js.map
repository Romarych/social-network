{"version":3,"file":"static/js/834.72c013c2.chunk.js","mappings":"gLACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,G,QAA0B,0B,SCY1B,EAN+B,SAACA,GAC5B,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,W,UCR1C,EAAyB,2BAAzB,EAA6D,2BCkB7D,EAVkC,SAACH,GAC/B,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OACI,gBAAKJ,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASI,GAAIF,EAAb,SAAoBJ,EAAMO,U,6BCRhCC,GAAeC,EAAAA,EAAAA,GAAiB,KAetC,GAFyBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,eAA1CD,EARvB,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACA,OAAO,kBAAMC,SAAUD,EAAhB,WACFE,EAAAA,EAAAA,IAAyC,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUP,GAAeQ,EAAAA,GAAU,GAAI,KAC1H,mBACA,+CCyBR,EAtB+B,SAAChB,GAE5B,IAAIiB,EAAkBjB,EAAMkB,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYb,KAAMa,EAAEb,KAAMF,GAAIe,EAAEf,IAASe,EAAEf,OACpFgB,EAAmBrB,EAAMsB,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASpB,QAASoB,EAAEpB,SAAcoB,EAAElB,OAMnF,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKe,KAEL,iBAAKhB,UAAWC,EAAhB,UACKmB,GACD,SAAC,GAAD,QAAkBR,SAXR,SAACW,GACnBxB,EAAMyB,YAAYD,EAAOE,kBAU8B1B,W,+DC5B3D2B,EAA0B,SAACC,GAAD,MAA0B,CACpDC,OAAQD,EAAME,KAAKD,SCAvB,OAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAAQ,SAACJ,GAAD,iBAA8BA,EAAMK,gBAArC,UAAyDC,EAAAA,KDQ7D,SAAgCC,GAUnC,OAFqCH,EAAAA,EAAAA,IAAkDL,EAAlDK,EANY,SAAChC,GAC9C,IAAK6B,EAAwB7B,EAAxB6B,OAAWO,GAAhB,OAA6BpC,EAA7B,GAEA,OAAK6B,GACE,SAACM,GAAD,UAAsBC,KADT,SAAC,KAAD,CAAU9B,GAAI,gBCd1C,CAGM+B","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageForm/MessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthNavigate.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__FD0pH\",\"dialogsItems\":\"Dialogs_dialogsItems__junGc\",\"messages\":\"Dialogs_messages__uI8Qb\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__43UVm\"};","import React, { FC } from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__eDeFk\",\"active\":\"DialogItem_active__vVhu9\"};","import React, { FC } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./DialogItem.module.css\"\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, { FC } from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { createField, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { NewMesageFormValuesType } from \"../Dialogs\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\ntype NewMesageFormValuesKeysType = Extract<keyof NewMesageFormValuesType, string>\r\n\r\nconst MessageForm: FC<InjectedFormProps<NewMesageFormValuesType>>\r\n= ({handleSubmit}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField<NewMesageFormValuesKeysType>(\"Enter your message\", \"newMessageText\", [required, maxLength100], Textarea, \"\", \"\")}\r\n        <br />\r\n        <button>Add Post</button>\r\n    </form>\r\n}\r\n\r\nconst MessageFormRedux = reduxForm<NewMesageFormValuesType>({form: \"MessageForm\"})(MessageForm)\r\n\r\nexport default MessageFormRedux;","import s from \"./Dialogs.module.css\"\r\nimport Message from \"./Message/Message\"\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport MessageFormRedux from \"./MessageForm/MessageForm\";\r\nimport { FC } from \"react\";\r\nimport { DialogType, MessageType } from \"../../redux/dialogs-reducer\"\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageText: string) => void\r\n\r\n}\r\n\r\nexport type NewMesageFormValuesType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n  \r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n    const addNewMessage = (values: NewMesageFormValuesType) => {\r\n        props.sendMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <MessageFormRedux onSubmit={addNewMessage} {...props}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, { FC } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsNavigate = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// type MapPropsType = ReturnType<typeof mapStateToPropsNavigate> \r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function WithAuthNavigate<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const NavigateComponent: FC<MapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        \r\n        if (!isAuth) return <Navigate to={\"/login\"} />\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n    let ConnectedAuthNavigateComponent = connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsNavigate)(NavigateComponent)\r\n\r\n    return ConnectedAuthNavigateComponent\r\n}\r\n","import Dialogs from \"./Dialogs\";\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthNavigate } from \"../../hoc/WithAuthNavigate\";\r\n\r\nexport default compose<React.ComponentType>( \r\n    connect((state: AppStateType) => ({...state.dialogsPage}), { ...actions }),\r\n    WithAuthNavigate\r\n    )(Dialogs) //as React.ComponentType;"],"names":["props","className","s","message","path","id","to","name","maxLength100","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","createField","required","Textarea","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageText","mapStateToPropsNavigate","state","isAuth","auth","compose","connect","dialogsPage","actions","WrappedComponent","restProps","Dialogs"],"sourceRoot":""}